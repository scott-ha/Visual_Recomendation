{"version":3,"sources":["components/developer.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","App","state","developers","completed","callApi","a","fetch","response","json","body","progress","setState","this","timer","setInterval","then","res","catch","err","console","log","clearInterval","props","classes","withStyles","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oTAIwBA,IAAMC,U,oCCwBxBC,G,kNAEJC,MAAQ,CACNC,WAAY,GACZC,UAAW,G,EAcbC,Q,sBAAU,8BAAAC,EAAA,sEACeC,MAAM,mBADrB,cACFC,EADE,gBAEWA,EAASC,OAFpB,cAEFC,EAFE,yBAGDA,GAHC,2C,EAMVC,SAAW,WAAO,IACRP,EAAc,EAAKF,MAAnBE,UACR,EAAKQ,SAAS,CAAER,UAAWA,GAAa,IAAM,EAAIA,EAAY,K,kEAnB3C,IAAD,OAClBS,KAAKC,MAAQC,YAAYF,KAAKF,SAAU,IACxCE,KAAKR,UACFW,MAAK,SAAAC,GAAG,OAAI,EAAKL,SAAS,CAAET,WAAYc,OACxCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,6CAI5BG,cAAcT,KAAKC,S,+BAeCD,KAAKU,MAAjBC,Y,GA9BMxB,cA+DHyB,eA7EA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,MAAO,OACPC,UAAgC,EAArBH,EAAMI,QAAQC,KACzBC,UAAW,QAEbC,MAAO,CACLC,SAAU,MAEZvB,SAAU,CACRwB,OAA6B,EAArBT,EAAMI,QAAQC,SAmEXN,CAAmBxB,GC/EdmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.c6e090d1.chunk.js","sourcesContent":["import React from 'react';\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nclass Developer extends React.Component {\n    render() {\n        return (\n            <TableRow>\n                <TableCell>{this.props.id}</TableCell>\n                <TableCell><img src={this.props.image} alt=\"profile\"/></TableCell>\n                <TableCell>{this.props.name}</TableCell>\n                <TableCell>{this.props.birthday}</TableCell>\n                <TableCell>{this.props.gender}</TableCell>\n                <TableCell>{this.props.gender}</TableCell>\n                <TableCell>{this.props.job}</TableCell>\n            </TableRow>\n        )\n    }\n}\n\nexport default Developer;","import React, { Component } from 'react';\nimport Developer from './components/developer';\nimport './App.css';\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// CSS using withStyles\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 1080\n  },\n  progress: {\n    margin: theme.spacing.unit * 2\n  }\n});\n\nclass App extends Component {\n\n  state = {\n    developers: '',\n    completed: 0\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 10);\n    this.callApi()\n      .then(res => this.setState({ developers: res }))\n      .catch(err => console.log(err));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/developers');\n    const body = await response.json();\n    return body\n  }\n\n  progress = () => {\n    const { completed } = this.state;\n    this.setState({ completed: completed >= 100 ? 0 : completed + 1 });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      // 반복하여 출력할 때 map을 통하여 수행하고 이때 key라는 이름의 props를 사용해야 한다.\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>번호</TableCell>\n              <TableCell>이미지</TableCell>\n              <TableCell>이름</TableCell>\n              <TableCell>생년월일</TableCell>\n              <TableCell>성별</TableCell>\n              <TableCell>직업</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.developers ? this.state.developers.map(c => {\n              return <Developer key={c.id} id={c.id} image={c.image} name={c.name} birthday={c.birthday} gender={c.gender} job={c.job} />\n            }) :\n              <TableRow>\n                <TableCell colSpan=\"6\" align=\"center\">\n                  <CircularProgress className={classes.progress} variant=\"determinate\" value={this.state.completed} />\n                </TableCell>\n              </TableRow>\n            }\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}